/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
"use strict";
const commandLineArgs = require('command-line-args');
const path = require('path');
const fs = require('fs');
const args_1 = require('./args');
const start_server_1 = require('./start_server');
function run() {
    return new Promise((resolve, reject) => {
        let argsWithHelp = args_1.args.concat({
            name: 'help',
            description: 'Shows this help message',
            type: Boolean,
        });
        var cli = commandLineArgs(argsWithHelp);
        try {
            var cliOptions = cli.parse();
        }
        catch (e) {
            printUsage(cli);
            resolve(null);
            return;
        }
        var options = {
            root: cliOptions.root,
            port: cliOptions.port,
            hostname: cliOptions.hostname,
            open: cliOptions.open,
            browser: cliOptions['browser'],
            openPath: cliOptions['open-path'],
            componentDir: cliOptions['component-dir'],
            packageName: cliOptions['package-name'],
        };
        if (cliOptions.help) {
            printUsage(cli);
            resolve(null);
        }
        else if (cliOptions.version) {
            console.log(getVersion());
            resolve(null);
        }
        else {
            return start_server_1.startServer(options);
        }
    });
}
exports.run = run;
function printUsage(cli) {
    var usage = cli.getUsage({
        header: 'A development server for Polymer projects',
        title: 'polyserve',
    });
    console.log(usage);
}
function getVersion() {
    let packageFilePath = path.resolve(__dirname, '../package.json');
    let packageFile = fs.readFileSync(packageFilePath).toString();
    let packageJson = JSON.parse(packageFile);
    let version = packageJson['version'];
    return version;
}
