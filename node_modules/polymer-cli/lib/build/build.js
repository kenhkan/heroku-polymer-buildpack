/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
"use strict";
const gulp = require('gulp');
const gulpif = require('gulp-if');
const mergeStream = require('merge-stream');
const path = require('path');
const logging = require('plylog');
const polymer_build_1 = require('polymer-build');
const optimize_streams_1 = require('./optimize-streams');
const prefetch_1 = require('./prefetch');
const streams_1 = require('./streams');
const sw_precache_1 = require('./sw-precache');
let logger = logging.getLogger('cli.build.build');
function build(options, config) {
    return new Promise((buildResolve, _) => {
        let polymerProject = new polymer_build_1.PolymerProject({
            root: config.root,
            shell: config.shell,
            entrypoint: config.entrypoint,
            fragments: config.fragments,
            sourceGlobs: options.sources,
            includeDependencies: options.includeDependencies,
        });
        if (options.insertDependencyLinks) {
            logger.debug(`Additional dependency links will be inserted into application`);
        }
        // mix in optimization options from build command
        // TODO: let this be set by the user
        let optimizeOptions = {
            html: Object.assign({ removeComments: true }, options.html),
            css: Object.assign({ stripWhitespace: true }, options.css),
            js: Object.assign({ minify: true }, options.js),
        };
        logger.info(`Building application...`);
        logger.debug(`Reading source files...`);
        let sourcesStream = polymerProject.sources()
            .pipe(polymerProject.splitHtml())
            .pipe(gulpif(/\.js$/, new optimize_streams_1.JSOptimizeStream(optimizeOptions.js)))
            .pipe(gulpif(/\.css$/, new optimize_streams_1.CSSOptimizeStream(optimizeOptions.css)))
            .pipe(gulpif(/\.html$/, new optimize_streams_1.HTMLOptimizeStream(optimizeOptions.html)))
            .pipe(polymerProject.rejoinHtml());
        logger.debug(`Reading dependencies...`);
        let depsStream = polymerProject.dependencies()
            .pipe(polymerProject.splitHtml())
            .pipe(gulpif(/\.js$/, new optimize_streams_1.JSOptimizeStream(optimizeOptions.js)))
            .pipe(gulpif(/\.css$/, new optimize_streams_1.CSSOptimizeStream(optimizeOptions.css)))
            .pipe(gulpif(/\.html$/, new optimize_streams_1.HTMLOptimizeStream(optimizeOptions.html)))
            .pipe(polymerProject.rejoinHtml());
        let buildStream = mergeStream(sourcesStream, depsStream)
            .once('data', () => { logger.debug('Analyzing build dependencies...'); })
            .pipe(polymerProject.analyzer);
        let unbundledPhase = polymer_build_1.forkStream(buildStream)
            .once('data', () => { logger.info('Generating build/unbundled...'); })
            .pipe(gulpif(options.insertDependencyLinks, new prefetch_1.PrefetchTransform(polymerProject.root, polymerProject.entrypoint, polymerProject.shell, polymerProject.fragments, polymerProject.analyzer)))
            .pipe(gulp.dest('build/unbundled'));
        let bundledPhase = polymer_build_1.forkStream(buildStream)
            .once('data', () => { logger.info('Generating build/bundled...'); })
            .pipe(polymerProject.bundler)
            .pipe(gulp.dest('build/bundled'));
        let swPrecacheConfig = path.resolve(polymerProject.root, options.swPrecacheConfig || 'sw-precache-config.js');
        let loadSWConfig = sw_precache_1.parsePreCacheConfig(swPrecacheConfig);
        loadSWConfig.then((swConfig) => {
            if (swConfig) {
                logger.debug(`Service worker config found`, swConfig);
            }
            else {
                logger.debug(`No service worker configuration found at ${swPrecacheConfig}, continuing with defaults`);
            }
        });
        // Once the unbundled build stream is complete, create a service worker for the build
        let unbundledPostProcessing = Promise.all([loadSWConfig, streams_1.waitFor(unbundledPhase)]).then((results) => {
            let swConfig = results[0];
            return polymer_build_1.addServiceWorker({
                buildRoot: 'build/unbundled',
                project: polymerProject,
                swConfig: swConfig,
            });
        });
        // Once the bundled build stream is complete, create a service worker for the build
        let bundledPostProcessing = Promise.all([loadSWConfig, streams_1.waitFor(bundledPhase)]).then((results) => {
            let swConfig = results[0];
            return polymer_build_1.addServiceWorker({
                buildRoot: 'build/bundled',
                project: polymerProject,
                swConfig: swConfig,
                bundled: true,
            });
        });
        return Promise.all([unbundledPostProcessing, bundledPostProcessing]).then(() => {
            logger.info('Build complete!');
            buildResolve();
        });
    });
}
exports.build = build;